* hackernews-clone
GraphQL API for a Hacker News clone

** How to use the GraphQL API
*** How to create a new ~User~:
#+begin_src graphql
  mutation createUser {
    signup(name: "Alice", email: "alice@mail.com", password: "secret1") {
      token
      user {
	id
      }
    }
  }
#+end_src
We'll get a response like this:
#+begin_src graphql
  {
    "data": {
      "signup": {
	"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY0NjQwOTkzOH0.fcicF0Pd0zbAQaUEkxMXlG1Jl0cxYJD3E-EGThL8NJA",
	"user": {
	  "id": 1
	}
      }
    }
  }
#+end_src
*** How to create a new ~Link~:
1) Copy the authentication ~token~ we got when creating a new ~User~, and, in the Headers tab in the bottom middle, add a new header. The name of the header will be ~Authorization~ and value will be ~Bearer __TOKEN__~, where ~__TOKEN__~ should be replaced with your auth token. Make sure that the header is enabled by clicking the blue tick mark.
2) With the Authorization header in place, send the following mutation to your GraphQL server:
#+begin_src graphql
  # ... operation
  mutation addLink ($description: String!, $url: String!) {
    post(description: $description, url: $url) {
      id
      description
      url
      postedBy {
	id
	name
	email
      }
    }
  }

  # ... variables
  {
    "description": "My first post",
    "url": "alice.com"
  }
#+end_src
We'll get a response like this:
#+begin_src graphql
  {
    "data": {
      "post": {
	"id": 1,
	"description": "My first post",
	"url": "alice.com",
	"postedBy": {
	  "id": 1,
	  "name": "Alice",
	  "email": "alice@mail.com"
	}
      }
    }
  }
#+end_src
3) To verify everything worked, you can send the following ~login~ mutation, which also requests the links created by the user you created just now. Verify that the ~links~ field contains the link you just created:
#+begin_src graphql
  mutation loginAgain {
    login(email: "alice@mail.com", password: "secret1") {
      token
      user {
	email
	links {
	  url
	  description          
	}
      }

    }
  }
#+end_src
We'll get a response like this:
#+begin_src graphql

  {
    "data": {
      "login": {
	"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY0NjQxMDc0Nn0.9ggyjwiCGDheu5Iy-uH6ccJD5-lej6DD0vR0KVkb32g",
	"user": {
	  "email": "alice@mail.com",
	  "links": [
	    {
	      "url": "alice.com/1",
	      "description": "My first post"
	    },
	    {
	      "url": "alice.com/2",
	      "description": "My second post"
	    },
	    {
	      "url": "alice.com/3",
	      "description": "My third (and last) post"
	    }
	  ]
	}
      }
    }
  }
#+end_src
4) If you try to create a new link with the Authorization header absent or disabled, you should get an error like this:
#+begin_src graphql
  {
    "errors": [
      {
	"message": "Cannot post without logging in.",
	"locations": [
	  {
	    "line": 2,
	    "column": 5
	  }
	],
	"path": [
	  "post"
	],
	"extensions": {
	  "code": "INTERNAL_SERVER_ERROR",
	  "exception": {
	    "stacktrace": [
	      "Error: Cannot post without logging in.",
	      "    at resolve (/home/sernamar/github/hackernews-clone/src/graphql/Link.ts:118:17)",
	      "    at field.resolve (/home/sernamar/github/hackernews-clone/node_modules/apollo-server-core/src/utils/schemaInstrumentation.ts:106:18)",
	      "    at resolveField (/home/sernamar/github/hackernews-clone/node_modules/graphql/execution/execute.js:464:18)",
	      "    at /home/sernamar/github/hackernews-clone/node_modules/graphql/execution/execute.js:261:18",
	      "    at /home/sernamar/github/hackernews-clone/node_modules/graphql/jsutils/promiseReduce.js:23:10",
	      "    at Array.reduce (<anonymous>)",
	      "    at promiseReduce (/home/sernamar/github/hackernews-clone/node_modules/graphql/jsutils/promiseReduce.js:20:17)",
	      "    at executeFieldsSerially (/home/sernamar/github/hackernews-clone/node_modules/graphql/execution/execute.js:258:37)",
	      "    at executeOperation (/home/sernamar/github/hackernews-clone/node_modules/graphql/execution/execute.js:236:55)",
	      "    at executeImpl (/home/sernamar/github/hackernews-clone/node_modules/graphql/execution/execute.js:116:14)"
	    ]
	  }
	}
      }
    ],
    "data": null
  }
#+end_src
*** How to get the ~feed~ (the ~Links~ in the database):
#+begin_src graphql
  query getFeed {
    feed {
      links {
	url
	description
	postedBy {
	  name
	  email
	}
      }
      count
    }
  }
#+end_src
We’ll get a response like this:
#+begin_src graphql
  {
    "data": {
      "feed": {
	"links": [
	  {
	    "url": "alice.com/1",
	    "description": "My first post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "alice.com/2",
	    "description": "My second post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "alice.com/3",
	    "description": "My third (and last) post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/spam",
	    "description": "Hey, there. Bob spaming here...",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/jokes",
	    "description": "I was joking!",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  },
	  {
	    "url": "carl.com/pi",
	    "description": "I like maths",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  },
	  {
	    "url": "carl.com/random",
	    "description": "I like statistics",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  }
	],
	"count": 7
      }
    }
  }
#+end_src
**** Filtering by description or url (or both):
#+begin_src graphql
  query filterFeed {
    feed (filter: "like") {
      links {
	url
	description
	postedBy {
	  name
	  email
	}
      }
      count
    }
  }
#+end_src
We’ll get a response like this:
#+begin_src graphql
  {
    "data": {
      "feed": {
	"links": [
	  {
	    "url": "carl.com/pi",
	    "description": "I like maths",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  },
	  {
	    "url": "carl.com/random",
	    "description": "I like statistics",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  }
	],
	"count": 2
      }
    }
  }
#+end_src
**** Pagination:
#+begin_src graphql
  query paginateFeed {
    feed(take: 3, skip: 2) {
      links {
	url
	description
	postedBy {
	  name
	  email
	}
      }
      count
    }
  }
#+end_src
We’ll get a response like this:
#+begin_src graphql
  {
    "data": {
      "feed": {
	"links": [
	  {
	    "url": "alice.com/3",
	    "description": "My third (and last) post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/spam",
	    "description": "Hey, there. Bob spaming here...",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/jokes",
	    "description": "I was joking!",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  }
	],
	"count": 7
      }
    }
  }
#+end_src
**** Ordering:
#+begin_src graphql
  query orderedFeed {
    feed(orderBy: [{createdAt: desc}]) {
      links {
	url
	description
	postedBy {
	  name
	  email
	}
      }
      count
    }
  }
#+end_src
We’ll get a response like this:
#+begin_src graphql
  {
    "data": {
      "feed": {
	"links": [
	  {
	    "url": "carl.com/random",
	    "description": "I like statistics",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  },
	  {
	    "url": "carl.com/pi",
	    "description": "I like maths",
	    "postedBy": {
	      "name": "Carl",
	      "email": "carl@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/jokes",
	    "description": "I was joking!",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  },
	  {
	    "url": "bob.io/spam",
	    "description": "Hey, there. Bob spaming here...",
	    "postedBy": {
	      "name": "Bob",
	      "email": "bob@mail.com"
	    }
	  },
	  {
	    "url": "alice.com/3",
	    "description": "My third (and last) post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "alice.com/2",
	    "description": "My second post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  },
	  {
	    "url": "alice.com/1",
	    "description": "My first post",
	    "postedBy": {
	      "name": "Alice",
	      "email": "alice@mail.com"
	    }
	  }
	],
	"count": 7
      }
    }
  }
#+end_src
*** How to vote a ~Link:~
(When executing the following instruction, make sure the Authorization header is enabled and has a valid token)
#+begin_src graphql
  mutation voteLink {
    vote(linkId: 4) {
      link {
	url
	description
      }
      user {
	name
	email
      }
    }
  }
#+end_src
We’ll get a response like this:
#+begin_src graphql
  {
    "data": {
      "vote": {
	"link": {
	  "url": "bob.io/spam",
	  "description": "Hey, there. Bob spaming here..."
	},
	"user": {
	  "name": "Carl",
	  "email": "carl@mail.com"
	}
      }
    }
  }
#+end_src
